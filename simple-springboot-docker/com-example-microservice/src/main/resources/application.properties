################
# Swagger Info #
################
info.app.name=Simple SpringBoot Docker Example
info.app.description=Example Spring Boot Application that is deployed to a Docker Container
info.app.version=0.0.1
info.app.contact.name=Jack phillips
info.app.contact.url=https://github.com/jackphillipsjmu
info.app.contact.email=jphillips@captechconsulting.com

#################################
# General Server/App Properties #
#################################
server.port=8089
server.compression.enabled=true
# Hibernate Logging
logging.level.org.hibernate.SQL=ERROR
# Jackson Properties
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.time-zone=UTC

###################
# H2 In Memory DB #
###################
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.initialization-mode=always
# H2 Database Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

###########################
# Audit Log Configuration #
###########################
# Enable or Disable Audit Logging
audit.log.enabled=true
# URI(s) to send to Audit Log
audit.log.inclusions=/example/**
# Set limit for audit log, H2 will throw error
# due to defaulting to VARCHAR(255)
audit.log.message.body.limit=255

##########################
# Values used by Service #
##########################
# External URL to call in example service class
example.get.url=https://www.google.com

######################
# Weather Alert Feed #
######################
weather.alert.feed.url=https://alerts.weather.gov/cap/us.php?x=1
weather.alert.cap.fields=effective,expires,category,urgency,severity,certainty,areaDesc
weather.alert.elastic.index=weather-alerts

weather.alert.kafka.topic=weather-alerts
weather.alert.kafka.bootstrap-servers=localhost:9092

spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=com.example.microservice.kafka.AvroSerializer

spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=com.example.microservice.kafka.AvroDeserializer


# Elasticsearch
spring.elasticsearch.rest.uris=http://localhost:9200
spring.elasticsearch.rest.username=elastic
spring.elasticsearch.rest.password=changeme
# uris, username, password
