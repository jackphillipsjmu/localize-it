buildscript {
    ext {
        spring_boot_version = '2.1.5.RELEASE'
        gradle_docker_version = '1.2'
        json_schema_pojo_version = '0.4.35'
        springfox_version = '2.9.2'
        swagger_annotations_version = '1.5.21'
        h2_version = '1.4.197'
        liquibase_version = '3.5.3'
        jjwt_version = '0.9.1'
        junit_version = '4.12'
        mockito_version = '2.21.0'
        jpa_version = '2.2'
        elastic_version = '7.0.1'
        // Documentation files
        asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
        swaggerOutputDir = file("${buildDir}/swagger")
        snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
    }
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version")
        classpath("se.transmode.gradle:gradle-docker:$gradle_docker_version")
        classpath("org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:$json_schema_pojo_version")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2")
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.1'
        classpath(files("libs/com-jsonschema-custom-0.0.1.jar"))
    }
}

// Plugins
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'jsonschema2pojo'
apply plugin: 'jacoco'
// IDE
apply plugin: 'idea'
apply plugin: 'eclipse'
// Documentation
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'

group 'com.example.microservice'
version '0.0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java.srcDir file("$project.buildDir}/generated-sources/js2p")
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.example.microservice.Application'
    }
    version = version
    from('src/main/java') {
        include '**/*.java'
    }
    from {
        configurations.compile.collect{it.isDirectory() ? it : zipTree(it)}
    }
}

dependencies {
    // Spring
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"

    // In memory H2 DB
    compile("com.h2database:h2:$h2_version")
    
    // Documentation Dependencies
    compile("io.springfox:springfox-swagger2:$springfox_version")
    compile("io.springfox:springfox-swagger-ui:$springfox_version")

    // Needed for JSON to POJO, utilizes Apache commons lib
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

    // Test Dependencies
    // Spring
    testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
    // Mockito
    testCompile("org.mockito:mockito-core:$mockito_version")    
    // JUnit
    testCompile("junit:junit:$junit_version")
    // Documentation generation
    testCompile group: 'io.springfox', name: 'springfox-staticdocs', version: '2.6.1'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
}

// Automated POJO Generation tool from JSON
jsonSchema2Pojo {
    sourceType = 'jsonschema'
    source = files("${sourceSets.main.output.resourcesDir}/schema")
    targetDirectory = file("${project.buildDir}/generated-sources/js2p")
    targetPackage = 'com.example.microservice.api'
    includeJsr303Annotations = true
    serializable = true
    customAnnotator = 'com.jsonschema.custom.automater.JpaSpringfoxAnnotator'
    includeAdditionalProperties = false
}

// Jacoco Test Reports
jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("${buildDir}/reports/jacoco")
}

// Setup test properties primarily for automated documentation generation
test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
}

// Converts Swagger JSON Doc to something that can be ingested by AsciiDoctor
convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.pathsGroupedBy'                          : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

// Automated AsciiDoc documentation task
asciidoctor {
    inputs.dir asciiDocOutputDir
    dependsOn convertSwagger2markup

    sources {
        include 'index.adoc'
    }

    backends = ['html5']
    attributes = [
            doctype    : 'book',
            toc        : 'left',
            toclevels  : '3',
            numbered   : '',
            sectlinks  : '',
            sectanchors: '',
            hardbreaks : '',
            generated  : asciiDocOutputDir
    ]
}

// Copy over necessary static documentation to be viewed when application is running
asciidoctor.doLast {
    copy {
        from "${asciidoctor.outputDir}/html5"
        into "${buildDir}/resources/main/static"
        include 'index.html'
    }
}

// Ensure Spring Boot Jar calls AsciiDoctor first
bootJar.dependsOn asciidoctor

bootRun {
    // support passing -Dsystem.property=value to bootRun task to override variables in application
    systemProperties = System.properties
}