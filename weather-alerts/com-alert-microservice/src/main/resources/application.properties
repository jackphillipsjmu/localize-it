################
# Swagger Info #
################
info.app.name=Weather Alert Service
info.app.description=Service to Ingest Weather Alert Data, perform transformations and send it to Kafka which is then picked up by a Consumer to push the data to Elasticsearch. In addition, it will push a CSV formatted file of the alert data to a S3 source bucket which has a AWS Lambda function tied to it to copy over the data to a sink bucket. When running the end-to-end process the code will attempt to resolve all configurations and environmental dependencies such as Lambda function and S3 bucket creation. However, this does require a running LocalStack instance which is defined in the service documentation.
info.app.version=0.0.1
info.app.contact.name=Jack phillips
info.app.contact.url=https://github.com/jackphillipsjmu
info.app.contact.email=jphillips@captechconsulting.com

#################################
# General Server/App Properties #
#################################
# Set the port to 8081 explicitly to not interfere with LocalStack web-console
server.port=${PORT:8081}
server.compression.enabled=true
# Hibernate Logging
logging.level.org.hibernate.SQL=ERROR
# Jackson Properties
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.time-zone=UTC

##################
# File Uploading #
##################
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=100MB

######################
# Weather Alert Feed #
######################
weather.alert.feed.url=https://alerts.weather.gov/cap/us.php?x=1
weather.alert.cap.fields=effective,expires,category,urgency,severity,certainty,areaDesc
#
# Weather Alert Scheduler to pull in data at certain intervals
#
weather.alert.scheduler.enabled=${SCHEDULE_ENABLED:false}
# The fixedDelay property makes sure that there is a delay of n millisecond between the finish time of an execution of
# a task and the start time of the next execution of the task.
# 5000 millis = 5 seconds
# 60000 millis = 1 minute
# 300000 millis = 5 minutes
fixedDelay.in.milliseconds=300000
# Task will be executed a first time after the initialDelay value and it will continue to be executed according to the fixedDelay.
initialDelay.in.milliseconds=5000

#########
# Kafka #
#########
weather.alert.kafka.enabled=${KAFKA_ENABLED:true}
weather.alert.kafka.topic=weather-alert-topic
weather.alert.kafka.bootstrap-servers=${KAFKA_SERVER:localhost:9092}

# Spring Kafka Configurations
spring.kafka.producer.bootstrap-servers=${KAFKA_SERVER:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=com.alert.microservice.service.kafka.avro.GenericAvroSerializer
spring.kafka.consumer.bootstrap-servers=${KAFKA_CONSUMER_SERVER:localhost:9092}
spring.kafka.consumer.group-id=group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=com.alert.microservice.service.kafka.avro.GenericAvroDeserializer

#################
# Elasticsearch #
#################
weather.alert.elasticsearch.enabled=${ES_ENABLED:true}
spring.elasticsearch.rest.uris=${ES_URL:http://localhost:4571}
spring.elasticsearch.rest.username=elastic
spring.elasticsearch.rest.password=changeme
weather.alert.elastic.index=${ES_INDEX:weather-alerts}

#######
# AWS #
#######
# S3
weather.alert.s3.url=${S3_URL:http://localhost:4572}
weather.alert.s3.region=us-east-1
weather.alert.s3.source-bucket=alert-source-bucket
weather.alert.s3.sink-bucket=alert-sink-bucket
weather.alert.s3.path-style-access-enabled=true
weather.alert.s3.chunked-encoding-disabled=true

# Lambda
weather.alert.lambda.url=${LAMBDA_URL:http://localhost:4574}
# When using LocalStack the region will default to us-east-1
weather.alert.lambda.region=us-east-1
weather.alert.lambda.function-name=weather-alert-lambda
# This is the path to the Lambda JAR that will be used to copy a file from a source bucket to a sink buck
# you can set this when running via the command line by running the following from the command line
# $ ./gradlew bootRun "-DLAMBDA_JAR_PATH=<PATH-TO>/com-alert-lambda/build/libs/com-alert-lambda-0.1.jar"
# or you can set it explicitly like the commented out jar-path property below
#weather.alert.lambda.jar-path=/Users/jphillips/IdeaProjects/localize-it/com-alert-lambda/build/libs/com-alert-lambda-0.1.jar
weather.alert.lambda.jar-path=${LAMBDA_JAR_PATH}
weather.alert.lambda.handler=com.alert.lambda.data.processor.AlertRequestHandler
# When using LocalStack the ARN is not used for simplicity
weather.alert.lambda.role=arn:aws:iam::123456:role/irrelevant
weather.alert.lambda.timeout=15
