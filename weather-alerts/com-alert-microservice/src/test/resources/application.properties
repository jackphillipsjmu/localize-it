################
# Swagger Info #
################
info.app.name=Weather Alert Service
info.app.description=Service to Ingest Weather Alert Data, perform transformations and send it to Kafka which is then picked up by a Consumer to push the data to Elasticsearch. In addition, it will push a CSV formatted file of the alert data to a S3 source bucket which has a AWS Lambda function tied to it to copy over the data to a sink bucket. When running the end-to-end process the code will attempt to resolve all configurations and environmental dependencies such as Lambda function and S3 bucket creation. However, this does require a running LocalStack instance which is defined in the parent README of this repository.
info.app.version=0.0.1
info.app.contact.name=Jack phillips
info.app.contact.url=https://github.com/jackphillipsjmu
info.app.contact.email=jack.phillips.mail@gmail.com

#################################
# General Server/App Properties #
#################################
server.port=8081
server.compression.enabled=true
# Hibernate Logging
logging.level.org.hibernate.SQL=ERROR
# Jackson Properties
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.time-zone=UTC

##################
# File Uploading #
##################
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=100MB

######################
# Weather Alert Feed #
######################
weather.alert.feed.url=https://alerts.weather.gov/cap/us.php?x=1
weather.alert.cap.fields=effective,expires,category,urgency,severity,certainty,areaDesc

#########
# Kafka #
#########
weather.alert.kafka.enabled=false
weather.alert.kafka.topic=weather-alert-topic
weather.alert.kafka.bootstrap-servers=localhost:9092

# Spring Kafka Configurations
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=com.alert.microservice.service.kafka.avro.GenericAvroSerializer
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=com.alert.microservice.service.kafka.avro.GenericAvroDeserializer

#################
# Elasticsearch #
#################
weather.alert.elasticsearch.enabled=true
spring.elasticsearch.rest.uris=http://localhost:4571
spring.elasticsearch.rest.username=elastic
spring.elasticsearch.rest.password=changeme
weather.alert.elastic.index=weather-alerts

#######
# AWS #
#######
# S3
weather.alert.s3.url=http://localhost:4572
weather.alert.s3.region=us-east-1
weather.alert.s3.source-bucket=alert-source-bucket
weather.alert.s3.sink-bucket=alert-sink-bucket
weather.alert.s3.path-style-access-enabled=true
weather.alert.s3.chunked-encoding-disabled=true

# Lambda
weather.alert.lambda.url=http://localhost:4574
weather.alert.lambda.region=us-east-1
weather.alert.lambda.function-name=weather-alert-lambda
weather.alert.lambda.jar-path=/Users/jphillips/IdeaProjects/localstack-example/com-alert-lambda/build/libs/com-alert-lambda-0.1.jar
weather.alert.lambda.handler=com.alert.lambda.data.processor.AlertRequestHandler
weather.alert.lambda.role=arn:aws:iam::123456:role/irrelevant
weather.alert.lambda.timeout=15




